import Head from "next/head";
import Image from "next/image";

import {AppLayout} from "@/components/Layout/AppLayout";
import {requireAuthenticatedPageView} from "@/handlers/auth";
import {Tokens, UserDataSecure} from "@/handlers/types";
import {
  fetchUserData,
  getPlayerStats,
  isErrorResponse,
} from "@/handlers/user-data";
import {useCookieSync} from "@/hooks/use-cookie-sync";
import avatarImage from "@/images/avatar.png";
import skillsImage from "@/images/skills.png";

export default function Profile({
  userData,
  cookie,
}: {
  userData: UserDataSecure;
  cookie?: object;
}) {
  useCookieSync(cookie);
  if (!userData) return <div>User not found!</div>;
  return (
    <>
      <Head>
        <title>{`${userData.name} | Forge Frontiers`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppLayout active="profile" title={`${userData.name}'s Profile`}>
        <div>
          {/* TODO DYNAMIC IMAGE */}
          <div className="sm:block flex items-center justify-center">
            <Image
              className="h-80 w-40 mt-4"
              width={316}
              height={512}
              src={
                userData.mc_user
                  ? `https://visage.surgeplay.com/full/512/${userData.mc_user}`
                  : avatarImage.src
              }
              alt="Avatar"
            />
          </div>
          <div className="flex-1">
            <Image
              className="h-80 w-full mt-4 hidden sm:block"
              src={skillsImage.src}
              height={skillsImage.height}
              width={skillsImage.width}
              alt="Skills"
            />
            <span className="italic">Skills data needs to be fetched</span>
          </div>
          <div className="flex item-center justify-between">
            <h2 className="text-xl">Inventory</h2>
            <h2 className="text-xl">Market Listings</h2>
          </div>
        </div>
      </AppLayout>
    </>
  );
}

export const getServerSideProps = requireAuthenticatedPageView(async (c) => {
  const userData = await fetchUserData(c);
  if (isErrorResponse(userData)) {
    return userData.resp;
  }

  // if (!hasToken(c.req.cookies.tokens)) {
  //   return {props: {error: "unknown"}};
  // }
  const t: Tokens =
    userData.extractTokens() || JSON.parse(c.req.cookies.tokens);

  const stats = await getPlayerStats(t);
  const json = await stats.json();
  if (!stats.ok) {
    return {props: json};
  }

  return userData.addCustomData({stats: json?.data}).toSSPropsResult;
});
